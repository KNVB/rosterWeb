import AdminShiftStatUtil from "./AdminShiftStatUtil";
import RosterDataUtil from "./RosterDataUtil";
import FetchAPI from "./FetchAPI";
import UndoableData from './UndoableData';
export default class RosterSchedulerDataUtil {
    #copiedData = null;
    #fetchAPI = new FetchAPI();
    #rosterDataUtil = new RosterDataUtil();
    #roster = null;
    #rosterDataHistory = null;
    #rosterSchedulerData = null;
    getItoIdList() {
        return this.#rosterDataUtil.getItoIdList();
    }
    getRoster() {
        return this.#roster
    }
    getRosterSchedulerData() {
        return this.#rosterSchedulerData;
    }
    getShiftCssClassName = shiftType => {
        return this.#rosterDataUtil.getShiftCssClassName(shiftType);
    }
    init = async (year, month, weekdayNames) => {
        await this.#rosterDataUtil.init(year, month, weekdayNames);
    }
    isDuplicateShift = (itoId, dateOfMonth) => {
        return this.#rosterSchedulerData.duplicateShiftList[itoId].includes(dateOfMonth);
    }
    loadData = async (year, month, noOfWorkingDay, monthLength) => {
        let temp = await this.#fetchAPI.getRosterSchedulerData(year, month);
        await this.#rosterDataUtil.loadData(year, month, noOfWorkingDay);
        this.#roster = this.#rosterDataUtil.getRoster();        
        this.#rosterSchedulerData = { blackListShiftList: {}, blackListShiftPattern: {}, preferredShiftList: {}, previousMonthShiftList: {} };
        this.getItoIdList().forEach(itoId => {
            this.#rosterSchedulerData.blackListShiftPattern[itoId] = JSON.parse(JSON.stringify(temp.itoBlackListShiftPattern[itoId]));
            this.#rosterSchedulerData.blackListShiftList[itoId] = {};
        });
        temp.previousMonthShiftList.forEach(previousMonthShift => {
            if (this.#rosterSchedulerData.previousMonthShiftList[previousMonthShift.ito_id] === undefined) {
                this.#rosterSchedulerData.previousMonthShiftList[previousMonthShift.ito_id] = [];
            }
            this.#rosterSchedulerData.previousMonthShiftList[previousMonthShift.ito_id].push(previousMonthShift.shift);
        });
        temp.preferredShiftList.forEach(preferredShift => {
            if (this.#rosterSchedulerData.preferredShiftList[preferredShift.ito_id] === undefined) {
                this.#rosterSchedulerData.preferredShiftList[preferredShift.ito_id] = {};
            }
            this.#rosterSchedulerData.preferredShiftList[preferredShift.ito_id][preferredShift.d] = preferredShift.preferred_shift;
        });

        this.#rosterSchedulerData.yearlyRosterStatistic = JSON.parse(JSON.stringify(temp.yearlyRosterStatistic));
        this.#rosterDataHistory = null;
        this.#updateRosterStatistic(noOfWorkingDay, monthLength);
        this.#backupRosterData();
    }
    updateShift(itoId, dateOfMonth, newShift, noOfWorkingDay, monthLength){
        let oldShift = this.#roster.rosterRow[itoId].shiftList[dateOfMonth];
        let newRosterShift = newShift.trim();
        switch (true) {
            case ((oldShift === undefined) && (newRosterShift !== '')):
            case ((oldShift !== undefined) && (newRosterShift !== oldShift)):
                this.#roster.rosterRow[itoId].shiftList[dateOfMonth] = newRosterShift;
                this.#updateRosterStatistic(noOfWorkingDay, monthLength);
                this.#backupRosterData();
                break;
            default:
                break;
        }
    }
    //====================================================================================================================================================
    #backupRosterData = () => {
        console.log("backup Roster Data");
        let temp = {
            rosterRow: this.#roster.rosterRow,
            rosterSchedulerData: this.#rosterSchedulerData
        }
        //console.log(temp);
        if (this.#rosterDataHistory === null) {
            this.#rosterDataHistory = new UndoableData(temp);
        } else {
            this.#rosterDataHistory.set(temp);
        }
    }
    #updateRosterStatistic = (noOfWorkingDay, monthLength) => {
        let { getAllITOStat } = AdminShiftStatUtil();
        //console.log(rosterSchedulerData.blackListShiftPattern);
        let temp = getAllITOStat(this.#roster.activeShiftList, 1, monthLength, this.#roster.rosterRow, this.#rosterSchedulerData.blackListShiftPattern);
        //console.log(temp, roster.rosterRow);
        this.#rosterSchedulerData.duplicateShiftList = temp.duplicateShiftList;
        this.#rosterSchedulerData.vacantShiftList = temp.vacantShiftList;
    }
}